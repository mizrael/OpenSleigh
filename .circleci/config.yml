version: 2.1

jobs:
  build:
    resource_class: large

    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0.100-alpine3.16-amd64
      - image: mongo:latest       
      - image: rabbitmq:3-management-alpine
        environment:
          RABBITMQ_DEFAULT_VHOST: "/opensleigh"
      - image: 'mcr.microsoft.com/mssql/server:2022-latest'
        environment:
          SA_PASSWORD: "Sup3r_p4ssword123"
          ACCEPT_EULA: "Y"
      - image: 'postgres:13.4'
        environment:
          POSTGRES_PASSWORD: "Sup3r_p4ssword123"
      - image: 'bitnami/zookeeper:3'
        environment:
          ALLOW_ANONYMOUS_LOGIN: yes
      - image: 'bitnami/kafka:2'
        environment:
          KAFKA_LISTENERS: LISTENER_BOB://localhost:29092,LISTENER_FRED://localhost:9092
          KAFKA_ADVERTISED_LISTENERS: LISTENER_BOB://localhost:29092,LISTENER_FRED://localhost:9092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_BOB:PLAINTEXT,LISTENER_FRED:PLAINTEXT
          KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_BOB
          KAFKA_CFG_ZOOKEEPER_CONNECT: localhost:2181
          ALLOW_PLAINTEXT_LISTENER: yes

    steps:
      - checkout    
      - run:
          name: Build      
          command: |            
            cd ./src
            dotnet build 
      - run:
          name: Unit tests
          command: |
            cd ./src            
            dotnet test --filter "Category!=E2E&Category!=Integration"
      - run:
          name: Integration tests
          command: |
            cd ./src            
            dotnet test --filter "FullyQualifiedName!~Cosmos&Category=Integration"

      #- run: # skipping E2E tests for now
      #    name: E2E tests
      #    command: |            
      #      dotnet test --filter "Category=E2E"           

  sonarscan:
    resource_class: large
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0-bullseye-slim-amd64
      - image: 'mongo:latest'        
      - image: 'rabbitmq:3-management-alpine'
        environment:
          RABBITMQ_DEFAULT_VHOST: "/opensleigh"
      - image: 'mcr.microsoft.com/mssql/server:2022-latest'
        environment:
          SA_PASSWORD: "Sup3r_p4ssword123"
          ACCEPT_EULA: "Y"
      - image: 'postgres:13.4'
        environment:
          POSTGRES_PASSWORD: "Sup3r_p4ssword123"
      - image: 'bitnami/zookeeper:3'
        environment:
          ALLOW_ANONYMOUS_LOGIN: yes
      - image: 'bitnami/kafka:2'
        environment:
          KAFKA_LISTENERS: LISTENER_BOB://localhost:29092,LISTENER_FRED://localhost:9092
          KAFKA_ADVERTISED_LISTENERS: LISTENER_BOB://localhost:29092,LISTENER_FRED://localhost:9092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_BOB:PLAINTEXT,LISTENER_FRED:PLAINTEXT
          KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_BOB
          KAFKA_CFG_ZOOKEEPER_CONNECT: localhost:2181
          ALLOW_PLAINTEXT_LISTENER: yes

    steps:
      - checkout

      - run:
          name: run sonarcloud
          command: |            
            export PATH="$PATH:/root/.dotnet/tools" 
            apt-get update && apt-get install -y default-jdk
            dotnet tool install --global dotnet-sonarscanner
            dotnet tool install --global coverlet.console                        
            dotnet-sonarscanner begin \
              /k:"mizrael_OpenSleigh" \
              /o:"mizrael" \
              /d:sonar.host.url="https://sonarcloud.io" \
              /d:sonar.login="$SONAR_TOKEN" \
              /d:sonar.cs.opencover.reportsPaths="**\coverage.opencover.xml"                                         
            dotnet test  ./src/OpenSleigh.sln --filter "FullyQualifiedName!~Cosmos&Category!=E2E" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage.opencover.xml  
            dotnet-sonarscanner end /d:sonar.login="$SONAR_TOKEN"

workflows:
  build_and_test:
    jobs:
      - build
  sonarscan:
    jobs:
      - sonarscan:
          context: SonarCloud
